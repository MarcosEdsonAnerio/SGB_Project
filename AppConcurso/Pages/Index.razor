@page "/"
@attribute [Authorize]
@inject SGB_Project.Controllers.LivroService LivroService
@inject SGB_Project.Controllers.LeitorService LeitorService
@inject SGB_Project.Controllers.EmprestimoService EmprestimoService

<div class="container mt-4">
    <div class="text-center" style="margin-bottom:0.2rem;">
        <img src="/LogoSGBPhotoroom.png" alt="Logo SGB" style="height:250px;max-width:400px;object-fit:contain;" />
    </div>
    <div class="text-center mb-5">
        <h1 class="display-4">📚 Sistema de Gestão de Biblioteca</h1>
        <p class="lead text-secondary">Visão geral do estado atual da biblioteca.</p>
    </div>

    @if (dadosCarregados)
    {
        <div class="row text-center">
            @* Card: Total de Livros *@
            <div class="col-md-3 mb-4">
                <div class="card border-primary shadow h-100">
                    <div class="card-body">
                        <i class="bi bi-book display-4 text-primary"></i>
                        <h6 class="mt-2">Livros no Acervo</h6>
                        <h3>@totalLivros</h3>
                    </div>
                </div>
            </div>

            @* Card: Leitores *@
            <div class="col-md-3 mb-4">
                <div class="card border-success shadow h-100">
                    <div class="card-body">
                        <i class="bi bi-people display-4 text-success"></i>
                        <h6 class="mt-2">Leitores Registrados</h6>
                        <h3>@totalLeitores</h3>
                    </div>
                </div>
            </div>

            @* Card: Empréstimos Ativos *@
            <div class="col-md-3 mb-4">
                <div class="card border-info shadow h-100">
                    <div class="card-body">
                        <i class="bi bi-arrow-left-right display-4 text-info"></i>
                        <h6 class="mt-2">Empréstimos Ativos</h6>
                        <h3>@totalEmprestimos</h3>
                    </div>
                </div>
            </div>

            @* Card: Livros Atrasados *@
            <div class="col-md-3 mb-4">
                <div class="card border-danger shadow h-100">
                    <div class="card-body">
                        <i class="bi bi-clock display-4 text-danger"></i>
                        <h6 class="mt-2">Livros Atrasados</h6>
                        <h3>@livrosAtrasados</h3>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <p class="text-center"><em>Carregando estatísticas...</em></p>
    }
</div>

@code {
    private int totalLivros;
    private int totalLeitores;
    private int totalEmprestimos;
    private int livrosAtrasados = 7;
    private bool dadosCarregados = false;
    private bool jsExecutado = false;

    [Inject]
    public IJSRuntime JS { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CarregarTotalLivros();
        await CarregarTotalLeitores();
        await CarregarTotalEmprestimos();

        dadosCarregados = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && dadosCarregados)
        {
            try
            {
                await JS.InvokeVoidAsync("renderizarGraficoDashboard");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao chamar JS: {ex.Message}");
            }
        }
    }

    private async Task CarregarTotalLivros()
    {
        var livros = await LivroService.ListarAsync();
        totalLivros = livros?.Count ?? 0;
    }

    private async Task CarregarTotalLeitores()
    {
        var leitores = await LeitorService.ListarAsync();
        totalLeitores = leitores?.Count ?? 0;
    }

    private async Task CarregarTotalEmprestimos()
    {
        var emprestimos = await EmprestimoService.ListarAsync();
        totalEmprestimos = emprestimos?.Count ?? 0;
    }
}
